name: CI/CD Pipeline
on:
  push: 
    branches:  
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: week5-lab-ecr-nicholas
  INFRASTRUCTURE_REPO: OppongNicholas303/S3-Image-Application-Infrastructure    
  STACK_NAME: S3AppStack 
  SERVICE_NAME: S3AppService
  TASK_FAMILY: S3AppTask
  CLUSTER_NAME: S3AppCluster
  DEPLOYMENT_GROUP: S3AppDeploymentGroup
  APPLICATION_NAME: S3AppCodeDeployApp

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout application code
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build and tag Docker image
        run: |
          IMAGE_TAG=$(date +%s)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:latest
          
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:latest
          
      - name: Check if CloudFormation stack exists
        id: check-stack
        run: |
          if aws cloudformation describe-stacks --stack-name $STACK_NAME 2>&1 | grep -q "Stack with id $STACK_NAME does not exist"; then
            echo "STACK_EXISTS=false" >> $GITHUB_ENV
          else
            echo "STACK_EXISTS=true" >> $GITHUB_ENV
          fi
          
      - name: Checkout Infrastructure Repository
        if: env.STACK_EXISTS == 'false'
        uses: actions/checkout@v2
        with:
          repository: ${{ env.INFRASTRUCTURE_REPO }}
          path: infrastructure
          
      - name: Deploy CloudFormation Stack
        if: env.STACK_EXISTS == 'false'
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/infastructure2.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides ImageUri=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:latest \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM

  blue-green-deployment:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Get or create execution role
        run: |
          # Try to get execution role from CloudFormation outputs
          EXECUTION_ROLE=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='EcsTaskExecutionRole'].OutputValue" --output text)
          
          if [ -z "$EXECUTION_ROLE" ] || [ "$EXECUTION_ROLE" = "None" ]; then
            echo "No execution role found in CloudFormation. Looking for existing ecsTaskExecutionRole..."
            
            # Try to find the default ECS task execution role
            EXECUTION_ROLE=$(aws iam list-roles --query "Roles[?RoleName=='ecsTaskExecutionRole'].Arn" --output text)
            
            if [ -z "$EXECUTION_ROLE" ] || [ "$EXECUTION_ROLE" = "None" ]; then
              echo "Creating new execution role..."
              
              # Create task execution role
              cat > execution-role-policy.json <<EOF
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "ecs-tasks.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
              EOF
              
              EXECUTION_ROLE=$(aws iam create-role \
                --role-name ecsTaskExecutionRole \
                --assume-role-policy-document file://execution-role-policy.json \
                --query 'Role.Arn' --output text)
                
              # Attach the required policies
              aws iam attach-role-policy \
                --role-name ecsTaskExecutionRole \
                --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
                
              aws iam attach-role-policy \
                --role-name ecsTaskExecutionRole \
                --policy-arn arn:aws:iam::aws:policy/AmazonECR-FullAccess
            fi
          fi
          
          echo "Using execution role: $EXECUTION_ROLE"
          echo "EXECUTION_ROLE=$EXECUTION_ROLE" >> $GITHUB_ENV
      
      - name: Create new task definition
        id: register-task-def
        run: |
          # Create container definition without logging if role is not available
          if [ -z "$EXECUTION_ROLE" ] || [ "$EXECUTION_ROLE" = "None" ]; then
            echo '{
              "name": "S3AppContainer",
              "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 3000,
                  "hostPort": 3000,
                  "protocol": "tcp"
                }
              ]
            }' > container-def.json
          else
            # With logging if we have an execution role
            echo '{
              "name": "S3AppContainer",
              "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 3000,
                  "hostPort": 3000,
                  "protocol": "tcp"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/${{ env.TASK_FAMILY }}",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs",
                  "awslogs-create-group": "true"
                }
              }
            }' > container-def.json
          fi
          
          # Create CloudWatch logs group if using logs
          if [ ! -z "$EXECUTION_ROLE" ] && [ "$EXECUTION_ROLE" != "None" ]; then
            aws logs create-log-group --log-group-name "/ecs/$TASK_FAMILY" || echo "Log group already exists"
          fi
          
          # Register the task definition with or without execution role
          if [ -z "$EXECUTION_ROLE" ] || [ "$EXECUTION_ROLE" = "None" ]; then
            # Without execution role
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
              --family $TASK_FAMILY \
              --requires-compatibilities FARGATE \
              --network-mode awsvpc \
              --cpu 1024 \
              --memory 2048 \
              --container-definitions "[$(cat container-def.json)]" \
              --query 'taskDefinition.taskDefinitionArn' --output text)
          else
            # With execution role
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
              --family $TASK_FAMILY \
              --requires-compatibilities FARGATE \
              --network-mode awsvpc \
              --cpu 1024 \
              --memory 2048 \
              --execution-role-arn "$EXECUTION_ROLE" \
              --container-definitions "[$(cat container-def.json)]" \
              --query 'taskDefinition.taskDefinitionArn' --output text)
          fi
          
          echo "TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Generate AppSpec file
        run: |
          echo 'version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "'$TASK_DEF_ARN'"
                  LoadBalancerInfo:
                    ContainerName: "S3AppContainer"
                    ContainerPort: 3000
                  PlatformVersion: "LATEST"' > appspec.yaml
          
          cat appspec.yaml

      - name: Deploy to ECS using AWS CodeDeploy
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name $APPLICATION_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP \
            --revision revisionType=AppSpecContent,appSpecContent="{content='$(cat appspec.yaml)'}" \
            --description "Automated deployment via GitHub Actions" \
            --query 'deploymentId' --output text)

          echo "Started deployment: $DEPLOYMENT_ID"
          aws deploy get-deployment --deployment-id $DEPLOYMENT_ID
          echo "Monitor the deployment progress in AWS CodeDeploy console"
