- name: Manage Existing Deployments
  run: |
    # Define an array of valid statuses
    STATUSES=("CREATED" "SUCCEEDED" "STOPPED" "FAILED")
    
    # Function to process deployments
    process_deployments() {
      local status=$1
      echo "Checking deployments with status: $status"
      
      # List deployments with the specific status
      DEPLOYMENTS=$(aws deploy list-deployments \
        --application-name ${{ env.CODEDEPLOY_APP }} \
        --deployment-group-name ${{ env.CODEDEPLOY_GROUP }} \
        --include-only-statuses "$status" \
        --query 'deployments' \
        --output text)
      
      # Process each deployment
      if [ -n "$DEPLOYMENTS" ]; then
        for DEPLOYMENT_ID in $DEPLOYMENTS; do
          echo "Processing deployment: $DEPLOYMENT_ID with status: $status"
          
          # Get detailed deployment information
          DEPLOYMENT_INFO=$(aws deploy get-deployment \
            --deployment-id "$DEPLOYMENT_ID" \
            --query 'deploymentInfo' \
            --output json)
          
          # Handle different statuses
          case "$status" in
            "CREATED"|"IN_PROGRESS")
              echo "Stopping deployment: $DEPLOYMENT_ID"
              aws deploy stop-deployment \
                --deployment-id "$DEPLOYMENT_ID" \
                --auto-rollback-enabled
              ;;
            "SUCCEEDED")
              echo "Deployment $DEPLOYMENT_ID already completed successfully"
              ;;
            "STOPPED"|"FAILED")
              echo "Deployment $DEPLOYMENT_ID is in terminal state: $status"
              ;;
          esac
        done
      else
        echo "No deployments found with status: $status"
      fi
    }
    
    # Process deployments for each status
    for STATUS in "${STATUSES[@]}"; do
      process_deployments "$STATUS"
    done

- name: Trigger CodeDeploy Deployment
  run: |
    # Add a small delay to ensure previous deployments are processed
    sleep 10

    # Create new deployment
    DEPLOYMENT_ID=$(aws deploy create-deployment \
      --application-name ${{ env.CODEDEPLOY_APP }} \
      --deployment-group-name ${{ env.CODEDEPLOY_GROUP }} \
      --revision revisionType=AppSpecContent,appSpecContent="{content='$(cat appspec.yaml)'}" \
      --description "Automated Blue/Green Deployment - $(date '+%Y-%m-%d %H:%M:%S')" \
      --query 'deploymentId' \
      --output text)

    echo "Started new deployment: $DEPLOYMENT_ID"

    # Monitor deployment
    DEPLOYMENT_STATUS=""
    MAX_ATTEMPTS=30
    ATTEMPT=0

    while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
      DEPLOYMENT_STATUS=$(aws deploy get-deployment \
        --deployment-id "$DEPLOYMENT_ID" \
        --query 'deploymentInfo.status' \
        --output text)

      echo "Deployment status (Attempt $((ATTEMPT+1))): $DEPLOYMENT_STATUS"

      # Check for terminal states
      case "$DEPLOYMENT_STATUS" in
        "SUCCEEDED")
          echo "Deployment completed successfully"
          break
          ;;
        "FAILED"|"STOPPED")
          echo "Deployment failed or stopped"
          exit 1
          ;;
        "IN_PROGRESS")
          sleep 30
          ;;
        *)
          echo "Unexpected deployment status: $DEPLOYMENT_STATUS"
          exit 1
          ;;
      esac

      ATTEMPT=$((ATTEMPT+1))
    done

    if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
      echo "Deployment monitoring timed out"
      exit 1
    fi
