name: Blue/Green ECS Deployment
on:
  push:
    branches: 
      - main

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 677276083056.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: week5-lab-ecr-nicholas
  ECS_CLUSTER: s3AppCluster
  ECS_SERVICE: s3App-service
  TASK_FAMILY: s3App-task

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build-image.outputs.image_tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare Blue/Green Deployment
        run: |
          # Describe current service to get current task definition
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].taskDefinition' \
            --output text)

          # Get full task definition details
          aws ecs describe-task-definition \
            --task-definition $CURRENT_TASK_DEF \
            --query 'taskDefinition' > current-task-def.json

          # Create new task definition with updated image
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --family ${{ env.TASK_FAMILY }} \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 2048 \
            --memory 4096 \
            --execution-role-arn $(jq -r '.executionRoleArn' current-task-def.json) \
            --container-definitions "[{
              \"name\": \"s3App-container\",
              \"image\": \"${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }}\",
              \"essential\": true,
              \"portMappings\": [{
                \"containerPort\": 3000,
                \"hostPort\": 3000
              }]
            }]" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "NEW_TASK_DEF=$NEW_TASK_DEF" >> $GITHUB_ENV

      - name: Perform Blue/Green Deployment
        run: |
          # Create a new service or update existing with blue/green deployment
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.NEW_TASK_DEF }} \
            --deployment-configuration maximumPercent=200,minimumHealthyPercent=50

      - name: Verify Deployment
        run: |
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

          # Optional: Run health checks or additional verification
          echo "Deployment completed successfully!"
