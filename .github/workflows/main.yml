name: CI/CD Pipeline
on:
  push: 
    branches:  
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: week5-lab-ecr-nicholas
  INFRASTRUCTURE_REPO: OppongNicholas303/S3-Image-Application-Infrastructure    
  STACK_NAME: S3AppStack 
  SERVICE_NAME: S3AppService
  TASK_FAMILY: S3AppTask  # Added separate task family name
  CLUSTER_NAME: S3AppCluster
  DEPLOYMENT_GROUP: S3AppDeploymentGroup
  APPLICATION_NAME: S3AppCodeDeployApp

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout application code
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build and tag Docker image
        run: |
          IMAGE_TAG=$(date +%s)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:latest
          
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:latest
          
      - name: Check if CloudFormation stack exists
        id: check-stack
        run: |
          if aws cloudformation describe-stacks --stack-name $STACK_NAME 2>&1 | grep -q "Stack with id $STACK_NAME does not exist"; then
            echo "STACK_EXISTS=false" >> $GITHUB_ENV
          else
            echo "STACK_EXISTS=true" >> $GITHUB_ENV
          fi
          
      - name: Checkout Infrastructure Repository
        if: env.STACK_EXISTS == 'false'
        uses: actions/checkout@v2
        with:
          repository: ${{ env.INFRASTRUCTURE_REPO }}
          path: infrastructure
          
      - name: Deploy CloudFormation Stack
        if: env.STACK_EXISTS == 'false'
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/infastructure2.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides ImageUri=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:latest \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM

  blue-green-deployment:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Check if task definition exists and create or update
        id: register-task-def
        run: |
          # Check if task definition exists
          TASK_DEF_EXISTS="true"
          aws ecs describe-task-definition --task-definition $TASK_FAMILY --query taskDefinition > task-definition.json || TASK_DEF_EXISTS="false"
          
          if [ "$TASK_DEF_EXISTS" = "true" ]; then
            echo "Task definition exists, updating..."
            # Update image in task definition
            jq --arg IMAGE "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE' task-definition.json > new-task-def.json
            
            # Register new task definition version
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
              --family $TASK_FAMILY \
              --requires-compatibilities FARGATE \
              --network-mode awsvpc \
              --cpu 2048 \
              --memory 4096 \
              --execution-role-arn $(jq -r '.executionRoleArn' task-definition.json) \
              --task-role-arn $(jq -r '.taskRoleArn' task-definition.json) \
              --container-definitions "$(jq '.containerDefinitions' new-task-def.json)" \
              --query 'taskDefinition.taskDefinitionArn' --output text)
          else
            echo "Task definition does not exist, creating new one..."
            # Create a new task definition from scratch
            cat > container-definition.json <<EOF
            [
              {
                "name": "S3AppContainer",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 3000,
                    "protocol": "tcp"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/$TASK_FAMILY",
                    "awslogs-region": "$AWS_REGION",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
            EOF
            
            # Get the ECS task execution role ARN from CloudFormation stack
            EXECUTION_ROLE_ARN=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='EcsTaskExecutionRole'].OutputValue" --output text)
            TASK_ROLE_ARN=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='EcsTaskRole'].OutputValue" --output text || echo "$EXECUTION_ROLE_ARN")
            
            # Register new task definition
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
              --family $TASK_FAMILY \
              --requires-compatibilities FARGATE \
              --network-mode awsvpc \
              --cpu 2048 \
              --memory 4096 \
              --execution-role-arn "$EXECUTION_ROLE_ARN" \
              --task-role-arn "$TASK_ROLE_ARN" \
              --container-definitions file://container-definition.json \
              --query 'taskDefinition.taskDefinitionArn' --output text)
          fi
          
          echo "TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Generate AppSpec file
        run: |
          cat > appspec.yaml <<EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "${TASK_DEF_ARN}"
                  LoadBalancerInfo:
                    ContainerName: "S3AppContainer"
                    ContainerPort: 3000
                  PlatformVersion: "LATEST"
          EOF
          
          cat appspec.yaml

      - name: Deploy to ECS using AWS CodeDeploy
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name $APPLICATION_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP \
            --revision revisionType=AppSpecContent,appSpecContent="{content='$(cat appspec.yaml)'}" \
            --description "Automated deployment via GitHub Actions" \
            --query 'deploymentId' --output text)

          echo "Started deployment: $DEPLOYMENT_ID"
          aws deploy get-deployment --deployment-id $DEPLOYMENT_ID
          echo "Monitor the deployment progress in AWS CodeDeploy console"
